use std::fmt;

pub enum HttpStatusCodeError {
    ConversionError,
}

impl fmt::Display for HttpStatusCodeError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                HttpStatusCodeError::ConversionError =>
                    "Failed to convert u16 to HTTP status code.",
            }
        )
    }
}

#[derive(Debug)]
pub enum HttpStatusCode {
    Continue = 100,
    SwitchingProtocols = 101,
    Processing = 102,
    EarlyHints = 103,

    Ok = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultiStatus = 207,
    AlreadyReported = 208,
    ImUsed = 226,

    MultipleChoices = 300,
    MovedPermanently = 301,
    Found = 302,
    SeeOther = 303,
    NotModified = 304,
    UseProxy = 305,
    TemporaryRedirect = 307,
    PermanentRedirect = 308,

    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    PayloadTooLarge = 413,
    UriTooLong = 414,
    UnsupportedMediaType = 415,
    RangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    MisdirectedRequest = 421,
    UnprocessableEntity = 422,
    Locked = 423,
    FailedDependency = 424,
    TooEarly = 425,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451,

    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HttpVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511,
}

impl TryFrom<u16> for HttpStatusCode {
    type Error = HttpStatusCodeError;

    fn try_from(u: u16) -> Result<Self, Self::Error> {
        match u {
            100 => Ok(Self::Continue),
            101 => Ok(Self::SwitchingProtocols),
            102 => Ok(Self::Processing),
            103 => Ok(Self::EarlyHints),
            200 => Ok(Self::Ok),
            201 => Ok(Self::Created),
            202 => Ok(Self::Accepted),
            203 => Ok(Self::NonAuthoritativeInformation),
            204 => Ok(Self::NoContent),
            205 => Ok(Self::ResetContent),
            206 => Ok(Self::PartialContent),
            207 => Ok(Self::MultiStatus),
            208 => Ok(Self::AlreadyReported),
            226 => Ok(Self::ImUsed),
            300 => Ok(Self::MultipleChoices),
            301 => Ok(Self::MovedPermanently),
            302 => Ok(Self::Found),
            303 => Ok(Self::SeeOther),
            304 => Ok(Self::NotModified),
            305 => Ok(Self::UseProxy),
            307 => Ok(Self::TemporaryRedirect),
            308 => Ok(Self::PermanentRedirect),
            400 => Ok(Self::BadRequest),
            401 => Ok(Self::Unauthorized),
            402 => Ok(Self::PaymentRequired),
            403 => Ok(Self::Forbidden),
            404 => Ok(Self::NotFound),
            405 => Ok(Self::MethodNotAllowed),
            406 => Ok(Self::NotAcceptable),
            407 => Ok(Self::ProxyAuthenticationRequired),
            408 => Ok(Self::RequestTimeout),
            409 => Ok(Self::Conflict),
            410 => Ok(Self::Gone),
            411 => Ok(Self::LengthRequired),
            412 => Ok(Self::PreconditionFailed),
            413 => Ok(Self::PayloadTooLarge),
            414 => Ok(Self::UriTooLong),
            415 => Ok(Self::UnsupportedMediaType),
            416 => Ok(Self::RangeNotSatisfiable),
            417 => Ok(Self::ExpectationFailed),
            418 => Ok(Self::ImATeapot),
            421 => Ok(Self::MisdirectedRequest),
            422 => Ok(Self::UnprocessableEntity),
            423 => Ok(Self::Locked),
            424 => Ok(Self::FailedDependency),
            425 => Ok(Self::TooEarly),
            426 => Ok(Self::UpgradeRequired),
            428 => Ok(Self::PreconditionRequired),
            429 => Ok(Self::TooManyRequests),
            431 => Ok(Self::RequestHeaderFieldsTooLarge),
            451 => Ok(Self::UnavailableForLegalReasons),
            500 => Ok(Self::InternalServerError),
            501 => Ok(Self::NotImplemented),
            502 => Ok(Self::BadGateway),
            503 => Ok(Self::ServiceUnavailable),
            504 => Ok(Self::GatewayTimeout),
            505 => Ok(Self::HttpVersionNotSupported),
            506 => Ok(Self::VariantAlsoNegotiates),
            507 => Ok(Self::InsufficientStorage),
            508 => Ok(Self::LoopDetected),
            510 => Ok(Self::NotExtended),
            511 => Ok(Self::NetworkAuthenticationRequired),
            _ => Err(HttpStatusCodeError::ConversionError),
        }
    }
}

impl fmt::Display for HttpStatusCode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                HttpStatusCode::Continue => "Continue",
                HttpStatusCode::SwitchingProtocols => "Switching Protocols",
                HttpStatusCode::Processing => "Processing",
                HttpStatusCode::EarlyHints => "Early Hints",
                HttpStatusCode::Ok => "OK",
                HttpStatusCode::Created => "Created",
                HttpStatusCode::Accepted => "Accepted",
                HttpStatusCode::NonAuthoritativeInformation => "Non-Authoritative Information",
                HttpStatusCode::NoContent => "No Content",
                HttpStatusCode::ResetContent => "Reset Content",
                HttpStatusCode::PartialContent => "Partial Content",
                HttpStatusCode::MultiStatus => "Multi-Status",
                HttpStatusCode::AlreadyReported => "Already Reported",
                HttpStatusCode::ImUsed => "IM Used",
                HttpStatusCode::MultipleChoices => "Multiple Choices",
                HttpStatusCode::MovedPermanently => "Moved Permanently",
                HttpStatusCode::Found => "Found",
                HttpStatusCode::SeeOther => "See Other",
                HttpStatusCode::NotModified => "Not Modified",
                HttpStatusCode::UseProxy => "Use Proxy",
                HttpStatusCode::TemporaryRedirect => "Temporary Redirect",
                HttpStatusCode::PermanentRedirect => "Permanent Redirect",
                HttpStatusCode::BadRequest => "Bad Request",
                HttpStatusCode::Unauthorized => "Unauthorized",
                HttpStatusCode::PaymentRequired => "Payment Required",
                HttpStatusCode::Forbidden => "Forbidden",
                HttpStatusCode::NotFound => "Not Found",
                HttpStatusCode::MethodNotAllowed => "Method Not Allowed",
                HttpStatusCode::NotAcceptable => "Not Acceptable",
                HttpStatusCode::ProxyAuthenticationRequired => "Proxy Authentication Required",
                HttpStatusCode::RequestTimeout => "Request Timeout",
                HttpStatusCode::Conflict => "Conflict",
                HttpStatusCode::Gone => "Gone",
                HttpStatusCode::LengthRequired => "Length Required",
                HttpStatusCode::PreconditionFailed => "Precondition Failed",
                HttpStatusCode::PayloadTooLarge => "Payload Too Large",
                HttpStatusCode::UriTooLong => "URI Too Long",
                HttpStatusCode::UnsupportedMediaType => "Unsupported Media Type",
                HttpStatusCode::RangeNotSatisfiable => "Range Not Satisfiable",
                HttpStatusCode::ExpectationFailed => "Expectation Failed",
                HttpStatusCode::ImATeapot => "I'm a teapot",
                HttpStatusCode::MisdirectedRequest => "Misdirected Request",
                HttpStatusCode::UnprocessableEntity => "Unprocessable Entity",
                HttpStatusCode::Locked => "Locked",
                HttpStatusCode::FailedDependency => "Failed Dependency",
                HttpStatusCode::TooEarly => "Too Early",
                HttpStatusCode::UpgradeRequired => "Upgrade Required",
                HttpStatusCode::PreconditionRequired => "Precondition Required",
                HttpStatusCode::TooManyRequests => "Too Many Requests",
                HttpStatusCode::RequestHeaderFieldsTooLarge => "Request Header Fields Too Large",
                HttpStatusCode::UnavailableForLegalReasons => "Unavailable For Legal Reasons",
                HttpStatusCode::InternalServerError => "Internal Server Error",
                HttpStatusCode::NotImplemented => "Not Implemented",
                HttpStatusCode::BadGateway => "Bad Gateway",
                HttpStatusCode::ServiceUnavailable => "Service Unavailable",
                HttpStatusCode::GatewayTimeout => "Gateway Timeout",
                HttpStatusCode::HttpVersionNotSupported => "HTTP Version Not Supported",
                HttpStatusCode::VariantAlsoNegotiates => "Variant Also Negotiates",
                HttpStatusCode::InsufficientStorage => "Insufficient Storage",
                HttpStatusCode::LoopDetected => "Loop Detected",
                HttpStatusCode::NotExtended => "Not Extended",
                HttpStatusCode::NetworkAuthenticationRequired => "Network Authentication Required",
            }
        )
    }
}
